import streamlit as st
import pandas as pd
import pandas_ta as ta
import akshare as ak
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import requests

st.set_page_config(page_title="üìà ÂÆûÊó∂ËÇ°Á•®&ETF AIÂàÜÊûêÂπ≥Âè∞", layout="wide")
st.title("üìä ÂÆûÊó∂ËÇ°Á•®/ETF ÊäÄÊúØÂàÜÊûê + ËµÑÈáëÊµÅÂêë + Ê∂àÊÅØÈù¢ + AI Ë∂ãÂäøÊ¶ÇÁéáÈ¢ÑÊµã")

# ========== ÊéßÂà∂Èù¢Êùø ==========
with st.sidebar:
    st.header("‚öôÔ∏è ÊéßÂà∂Èù¢Êùø")
    with st.expander("üìå Âü∫Á°ÄËÆæÁΩÆ", expanded=True):
        code_type = st.radio("Á±ªÂûã", ["AËÇ°", "ETF"], horizontal=True)
        code = st.text_input("ËÇ°Á•®/ETF‰ª£Á†ÅÔºàÂ¶Ç 600519 Êàñ 510300Ôºâ", "600519")
        show_volume = st.checkbox("ÊòæÁ§∫Êàê‰∫§Èáè", value=True)
    with st.expander("üìä ÊåáÊ†áËÆæÁΩÆ", expanded=True):
        show_ma = st.multiselect("ÊòæÁ§∫ÂùáÁ∫ø", ["MA5", "MA20"], default=["MA5", "MA20"])
        indicator = st.selectbox("ÈÄâÊã©È¢ùÂ§ñÊåáÊ†á", ["MACD", "RSI", "BOLL", "KDJ"])
    with st.expander("ü§ñ AI ËÆæÁΩÆ", expanded=False):
        DEEPSEEK_API_KEY = st.text_input(
            "ËØ∑ËæìÂÖ• DeepSeek API KeyÔºàÁïôÁ©∫ÂàôÂè™ÂÅöÊú¨Âú∞ÊäÄÊúØÁÇπËØÑÔºâ",
            type="password"
        )
    analyze_btn = st.button("üöÄ ÂºÄÂßãÂàÜÊûê")

# ========== Ê†∏ÂøÉÔºöÊï∞ÊçÆËé∑ÂèñÈÄöÁî®Êé•Âè£ ==========
@st.cache_data(ttl=300)
def fetch_realtime_kline(code: str, code_type: str):
    import akshare as ak
    import pandas as pd

    try:
        if code_type == "AËÇ°":
            symbol = f"sh{code}" if code.startswith("6") else f"sz{code}"
            try:
                df = ak.stock_zh_a_daily(symbol=symbol, adjust="qfq")
            except Exception as e:
                st.error(f"AËÇ°Êé•Âè£Êä•ÈîôÔºö{e}")
                return pd.DataFrame()
        else:
            # ETFÂ§öÊé•Âè£Ëá™Âä®ÂÖúÂ∫ï
            df = pd.DataFrame()
            for etf_func in [
                lambda c: ak.fund_etf_hist_sina(symbol=c),
                lambda c: ak.fund_etf_hist_em(symbol=c),
                lambda c: ak.fund_etf_hist_jsl(symbol=c)
            ]:
                try:
                    tmp = etf_func(code)
                    if tmp is not None and not tmp.empty:
                        df = tmp
                        break
                except Exception:
                    continue
        df = df.reset_index(drop=True)
        if df is None or df.empty:
            st.error(f"‰ª£Á†Å {code} Êó†ÂèØÁî®Ë°åÊÉÖÊï∞ÊçÆÔºàÊâÄÊúâÊé•Âè£ËøîÂõûÁ©∫ÔºâÔºÅËØ∑Êç¢ETFÊàñËÇ°Á•®‰ª£Á†ÅÂÜçËØï„ÄÇ")
            st.stop()
        # Â≠óÊÆµËá™Âä®Êò†Â∞Ñ
        name_map = {
            "date": "date", "Êó•Êúü": "date", "‰∫§ÊòìÊó•Êúü": "date",
            "open": "open", "ÂºÄÁõò": "open",
            "close": "close", "Êî∂Áõò": "close",
            "high": "high", "ÊúÄÈ´ò": "high",
            "low": "low", "ÊúÄ‰Ωé": "low",
            "volume": "volume", "Êàê‰∫§Èáè": "volume", "Êàê‰∫§Èáè(Êâã)": "volume", "Êàê‰∫§Èáè(ËÇ°)": "volume"
        }
        df = df.rename(columns={k: v for k, v in name_map.items() if k in df.columns})
        need_cols = ["date", "open", "close", "high", "low", "volume"]
        miss = [x for x in need_cols if x not in df.columns]
        if miss:
            st.error(f"Êï∞ÊçÆÁº∫Â§±ÂÖ≥ÈîÆÂ≠óÊÆµ: {miss}ÔºåÂÆûÈôÖÂ≠óÊÆµ: {df.columns.tolist()}")
            st.write(df.head())
            st.stop()
        df["date"] = pd.to_datetime(df["date"])
        return df
    except Exception as e:
        st.error(f"Ë°åÊÉÖÊï∞ÊçÆÊé•Âè£ÂºÇÂ∏∏: {e}")
        st.stop()

@st.cache_data(ttl=300)
def fetch_stock_news(code: str, code_type: str):
    try:
        if code_type == "ETF":
            return ["ETFÊöÇÊó†‰∏™ËÇ°Êñ∞ÈóªÔºåÂª∫ËÆÆÂÖ≥Ê≥®ÊåáÊï∞„ÄÅ‰∏ªÈ¢òÊàñÂ∏ÇÂú∫Ê∂àÊÅØ"]
        df = ak.stock_news_em(symbol=code)
        for col in ["title", "Êñ∞ÈóªÊ†áÈ¢ò", "Ê†áÈ¢ò"]:
            if col in df.columns:
                return df[col].head(5).tolist()
        return ["Êú™ÊâæÂà∞Êñ∞ÈóªÊ†áÈ¢òÂ≠óÊÆµ"]
    except Exception as e:
        return [f"Êñ∞ÈóªËé∑ÂèñÂ§±Ë¥•: {e}"]

@st.cache_data(ttl=300)
def fetch_fund_flow(code: str, code_type: str):
    try:
        if code_type == "AËÇ°":
            df = ak.stock_individual_fund_flow(stock=code)
            df = df.tail(5).reset_index(drop=True)
            for col in ["‰∏ªÂäõÂáÄÊµÅÂÖ•-ÂáÄÈ¢ù", "‰∏ªÂäõÂáÄÊµÅÂÖ•", "‰∏ªÂäõÂáÄÊµÅÂÖ•ÂáÄÈ¢ù", "‰∏ªÂäõËµÑÈáëÊµÅÂÖ•", "‰∏ªÂäõËµÑÈáëÂáÄÊµÅÂÖ•"]:
                if col in df.columns:
                    return df[["Êó•Êúü", col]].rename(columns={col: "‰∏ªÂäõÂáÄÊµÅÂÖ•"}).to_dict("records")
            return [{"error": f"Êú™ÊâæÂà∞‰∏ªÂäõÂáÄÊµÅÂÖ•Â≠óÊÆµÔºåÁé∞ÊúâÂ≠óÊÆµ: {df.columns.tolist()}"}]
        else:
            # ETFÔºöÁî®Êàê‰∫§È¢ù/Êàê‰∫§ÈáèÔºàËµÑÈáëÊµÅËøë‰ººÔºâÔºåak.fund_etf_hist_emÊúÄÁ®≥
            df = ak.fund_etf_hist_em(symbol=code)
            df = df.tail(5)
            if "Êó•Êúü" in df.columns and "Êàê‰∫§È¢ù" in df.columns and "Êàê‰∫§Èáè" in df.columns:
                return df[["Êó•Êúü", "Êàê‰∫§È¢ù", "Êàê‰∫§Èáè"]].to_dict("records")
            else:
                return [{"error": f"ETFÊé•Âè£Êó†Êàê‰∫§È¢ù/ÈáèÂ≠óÊÆµÔºåËøîÂõû: {df.columns.tolist()}"}]
    except Exception as e:
        return [{"error": str(e)}]

@st.cache_data(ttl=300)
def fetch_stock_concepts(code: str, code_type: str):
    try:
        if code_type == "ETF":
            return ["ETFÊåáÊï∞/‰∏ªÈ¢òÂûã", "ÂÖ∑‰Ωì‰∏ªÈ¢òÂèØÂèÇËÄÉETFÂêçÁß∞"]
        all_concepts = ak.stock_board_concept_name_ths()
        concept_col = None
        for col in ["ÂêçÁß∞", "ÊùøÂùóÂêçÁß∞", "name"]:
            if col in all_concepts.columns:
                concept_col = col
                break
        if not concept_col:
            return [f"Êú™ÊâæÂà∞ÊùøÂùóÂ≠óÊÆµÔºåÁé∞ÊúâÂ≠óÊÆµ: {all_concepts.columns.tolist()}"]
        result = []
        for name in all_concepts[concept_col]:
            try:
                cons = ak.stock_board_concept_cons_ths(symbol=name)
                for code_col in ["‰ª£Á†Å", "code"]:
                    if code_col in cons.columns and code in cons[code_col].astype(str).tolist():
                        result.append(name)
            except:
                continue
        return result if result else ["Êú™ÊâæÂà∞ÊâÄÂ±ûÊ¶ÇÂøµÊùøÂùó"]
    except Exception as e:
        return [f"Ëé∑ÂèñÊùøÂùóÂ§±Ë¥•: {e}"]

@st.cache_data(ttl=300)
def fetch_concept_fund_flow(concept_name=None):
    import akshare as ak
    import pandas as pd
    try:
        # Êñ∞Êé•Âè£ÔºöÁî®histÊé•Âè£ÔºåÂèñÊúÄËøë5Êó•ÔºåÂê´‰∏ªÂäõËµÑÈáëÊµÅ/Ê∂®Ë∑åÂπÖ
        if concept_name is None:
            # ÂèØÈÄâÔºöËøîÂõûÊâÄÊúâÊùøÂùóÊúÄÊñ∞Ë°åÊÉÖ/ÊàñÈÅçÂéÜÊâÄÊúâ‰∏ªÊµÅÊùøÂùó
            concept_list = ak.stock_board_concept_name_ths()
            flows = []
            for name in concept_list['name'].head(20):  # Âè™Êü•Ââç20‰∏™ÁÉ≠Èó®ÔºåÈÅøÂÖçAPIÈ¢ëÁπÅ
                try:
                    df = ak.stock_board_concept_hist_ths(symbol=name, start_date="20230901", end_date=pd.Timestamp.today().strftime('%Y%m%d'))
                    if not df.empty:
                        last = df.iloc[-1]
                        flows.append({
                            "ÊùøÂùóÂêçÁß∞": name,
                            "Ê∂®Ë∑åÂπÖ": last.get("Ê∂®Ë∑åÂπÖ", None),
                            "‰∏ªÂäõÂáÄÊµÅÂÖ•": last.get("‰∏ªÂäõËµÑÈáëÂáÄÊµÅÂÖ•", None)
                        })
                except:
                    continue
            return pd.DataFrame(flows)
        else:
            df = ak.stock_board_concept_hist_ths(symbol=concept_name, start_date="20230901", end_date=pd.Timestamp.today().strftime('%Y%m%d'))
            return df.tail(5)
    except Exception as e:
        return pd.DataFrame({"error": [str(e)]})

def format_money(x):
    try:
        x = float(x)
        if abs(x) >= 1e8:
            return f"{x/1e8:.2f} ‰∫ø"
        elif abs(x) >= 1e4:
            return f"{x/1e4:.2f} ‰∏á"
        else:
            return f"{x:.0f}"
    except:
        return str(x)

def add_indicators(df: pd.DataFrame, indicator: str):
    df["MA5"] = ta.sma(df["close"], length=5)
    df["MA20"] = ta.sma(df["close"], length=20)
    if indicator == "MACD":
        macd = ta.macd(df["close"])
        df["MACD"] = macd["MACD_12_26_9"]
        df["MACDh"] = macd["MACDh_12_26_9"]
        df["MACDs"] = macd["MACDs_12_26_9"]
    elif indicator == "RSI":
        df["RSI"] = ta.rsi(df["close"], length=14)
    elif indicator == "BOLL":
        boll = ta.bbands(df["close"], length=20, std=2)
        df["BOLL_U"] = boll["BBU_20_2.0"]
        df["BOLL_M"] = boll["BBM_20_2.0"]
        df["BOLL_L"] = boll["BBL_20_2.0"]
    elif indicator == "KDJ":
        kdj = ta.stoch(df["high"], df["low"], df["close"])
        df["K"] = kdj["STOCHk_14_3_3"]
        df["D"] = kdj["STOCHd_14_3_3"]
        df["J"] = 3 * df["K"] - 2 * df["D"]
    return df.dropna()

def plot_chart(df: pd.DataFrame, code: str, indicator: str, show_ma: list, show_volume: bool):
    fig = make_subplots(rows=3, cols=1, shared_xaxes=True,
                        row_heights=[0.6, 0.2, 0.2],
                        vertical_spacing=0.05,
                        subplot_titles=(f"{code} KÁ∫øÂõæ", "Êàê‰∫§Èáè", indicator))
    fig.add_trace(go.Candlestick(
        x=df["date"], open=df["open"], high=df["high"],
        low=df["low"], close=df["close"], name="KÁ∫øÂõæ"
    ), row=1, col=1)
    if "MA5" in show_ma:
        fig.add_trace(go.Scatter(x=df["date"], y=df["MA5"], name="MA5"), row=1, col=1)
    if "MA20" in show_ma:
        fig.add_trace(go.Scatter(x=df["date"], y=df["MA20"], name="MA20"), row=1, col=1)
    if show_volume:
        fig.add_trace(go.Bar(x=df["date"], y=df["volume"], name="Êàê‰∫§Èáè", opacity=0.4), row=2, col=1)
    if indicator == "MACD":
        fig.add_trace(go.Bar(x=df["date"], y=df["MACDh"], name="MACDh", opacity=0.3), row=3, col=1)
        fig.add_trace(go.Scatter(x=df["date"], y=df["MACD"], name="MACD"), row=3, col=1)
        fig.add_trace(go.Scatter(x=df["date"], y=df["MACDs"], name="‰ø°Âè∑Á∫ø"), row=3, col=1)
    elif indicator == "RSI":
        fig.add_trace(go.Scatter(x=df["date"], y=df["RSI"], name="RSI"), row=3, col=1)
    elif indicator == "BOLL":
        fig.add_trace(go.Scatter(x=df["date"], y=df["BOLL_U"], name="‰∏äËΩ®"), row=1, col=1)
        fig.add_trace(go.Scatter(x=df["date"], y=df["BOLL_M"], name="‰∏≠ËΩ®"), row=1, col=1)
        fig.add_trace(go.Scatter(x=df["date"], y=df["BOLL_L"], name="‰∏ãËΩ®"), row=1, col=1)
    elif indicator == "KDJ":
        fig.add_trace(go.Scatter(x=df["date"], y=df["K"], name="K"), row=3, col=1)
        fig.add_trace(go.Scatter(x=df["date"], y=df["D"], name="D"), row=3, col=1)
        fig.add_trace(go.Scatter(x=df["date"], y=df["J"], name="J"), row=3, col=1)
    fig.update_layout(height=900, xaxis_rangeslider_visible=False, showlegend=True)
    return fig

# ========== AI Ê¶ÇÁéáÈ¢ÑÊµã ==========
DEEPSEEK_URL = "https://api.deepseek.com/v1/chat/completions"
def deepseek_probability_predict(tech_summary: str, fund_flow: list, news_list: list, api_key: str):
    news_text = "\n".join([f"- {n}" for n in news_list]) if news_list else "Êó†Áõ∏ÂÖ≥Êñ∞Èóª"
    flow_text = "\n".join([
        f"{d['Êó•Êúü']} ‰∏ªÂäõÂáÄÊµÅÂÖ•: {format_money(d.get('‰∏ªÂäõÂáÄÊµÅÂÖ•', d.get('ETF‰ªΩÈ¢ù','Êó†')))}"
        for d in fund_flow if "‰∏ªÂäõÂáÄÊµÅÂÖ•" in d or "ETF‰ªΩÈ¢ù" in d
    ])
    prompt = f"""
‰ª•‰∏ãÊòØÊüêÂè™ËÇ°Á•®/ETFÁöÑÂ§öÁª¥Â∫¶Êï∞ÊçÆÔºåËØ∑ÁªìÂêàÊó•Á∫øË∂ãÂäø„ÄÅËµÑÈáëÊµÅÂêë„ÄÅÊäÄÊúØÊåáÊ†áÂíåÊñ∞ÈóªÔºåÁªôÂá∫Êú™Êù•3Êó•ÂÜÖÁöÑË∂ãÂäøÊ¶ÇÁéáÈ¢ÑÊµãÔºö
- ‰∏äÊ∂®Ê¶ÇÁéáÔºà%Ôºâ
- ÈúáËç°Ê¶ÇÁéáÔºà%Ôºâ
- ‰∏ãË∑åÊ¶ÇÁéáÔºà%Ôºâ
Âπ∂ÁÆÄË¶ÅËØ¥ÊòéÂéüÂõ†„ÄÇ

„ÄêÊäÄÊúØÈù¢„Äë  
{tech_summary}

„ÄêËµÑÈáëÊµÅÂêë„Äë  
{flow_text if flow_text else "ÊöÇÊó†ËµÑÈáëÊµÅÊï∞ÊçÆ"}

„ÄêÊ∂àÊÅØÈù¢„Äë  
{news_text}
"""
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    payload = {"model": "deepseek-chat","messages": [{"role": "user", "content": prompt}],"max_tokens": 600,"temperature": 0.5}
    try:
        resp = requests.post(DEEPSEEK_URL, headers=headers, json=payload, timeout=60)
        resp.raise_for_status()
        return resp.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"DeepSeek Ê¶ÇÁéáÈ¢ÑÊµãÂá∫Èîô: {e}"

# ========== ‰∏ªÁ®ãÂ∫è ==========
if analyze_btn:
    with st.spinner("Êï∞ÊçÆÂä†ËΩΩ‰∏≠..."):
        df = fetch_realtime_kline(code, code_type)
        if df is None or df.empty:
            st.stop()
        df = add_indicators(df, indicator)

    tab1, tab2, tab3, tab4, tab5 = st.tabs(
        ["üìà ÂõæË°®", "üì∞ Êñ∞Èóª", "üí∞ ËµÑÈáëÊµÅ", "ü§ñ AI/Êú¨Âú∞ÂàÜÊûê", "üìä ÊùøÂùóÊ¶ÇÂøµËÅîÂä®"]
    )

    with tab1:
        st.plotly_chart(plot_chart(df, code, indicator, show_ma, show_volume), use_container_width=True)

    with tab2:
        news_list = fetch_stock_news(code, code_type)
        st.subheader("üì∞ ÂÆûÊó∂Ê∂àÊÅØÈù¢")
        for n in news_list:
            st.write("- " + n)

    with tab3:
        fund_flow = fetch_fund_flow(code, code_type)
        if code_type == "AËÇ°":
            st.subheader("üí∞ ËµÑÈáëÊµÅÂêëÔºàËøë5Êó•Ôºâ")
            for f in fund_flow:
                if "‰∏ªÂäõÂáÄÊµÅÂÖ•" in f:
                    val = format_money(f["‰∏ªÂäõÂáÄÊµÅÂÖ•"])
                    prefix = "+" if f["‰∏ªÂäõÂáÄÊµÅÂÖ•"] > 0 else ""
                    st.write(f"{f['Êó•Êúü']} ‰∏ªÂäõÂáÄÊµÅÂÖ•: {prefix}{val}")
                elif "error" in f:
                    st.error(f["error"])
                else:
                    st.write(f)
        else:
            st.subheader("üí∞ ETFÊàê‰∫§È¢ù/Êàê‰∫§ÈáèÔºàËøë5Êó•Ôºå‰ªÖ‰æõËµÑÈáëÊµÅÂèÇËÄÉÔºâ")
            for f in fund_flow:
                if "Êàê‰∫§È¢ù" in f and "Êàê‰∫§Èáè" in f:
                    st.write(f"{f['Êó•Êúü']} Êàê‰∫§È¢ù: {format_money(f['Êàê‰∫§È¢ù'])}ÔºåÊàê‰∫§Èáè: {format_money(f['Êàê‰∫§Èáè'])}")
                elif "error" in f:
                    st.error(f["error"])
                else:
                    st.write(f)

    with tab4:
        latest = df.iloc[-1]
        summary = f"Êî∂Áõò‰ª∑:{latest['close']:.2f}, MA5:{latest['MA5']:.2f}, MA20:{latest['MA20']:.2f}"
        if indicator == "MACD":
            summary += f", MACD:{latest['MACD']:.3f}, ‰ø°Âè∑Á∫ø:{latest['MACDs']:.3f}"
        st.subheader("üìå ÊäÄÊúØÊåáÊ†áÊÄªÁªì")
        st.write(summary)
        if DEEPSEEK_API_KEY:
            with st.spinner("DeepSeek AI Ê¶ÇÁéáÈ¢ÑÊµã‰∏≠..."):
                ai_text = deepseek_probability_predict(summary, fund_flow, news_list, DEEPSEEK_API_KEY)
                st.subheader("üìä AI Ë∂ãÂäøÊ¶ÇÁéáÈ¢ÑÊµã")
                st.write(ai_text)
        else:
            st.subheader("ü§ñ Êú¨Âú∞ÊäÄÊúØÈù¢ÁÇπËØÑ")
            if indicator == "MACD":
                if latest["MACD"] > latest["MACDs"]:
                    st.write("MACD ÈáëÂèâÔºåÁü≠ÊúüÊúâÂèçÂºπÂèØËÉΩ„ÄÇ")
                elif latest["MACD"] < latest["MACDs"]:
                    st.write("MACD Ê≠ªÂèâÔºåÁü≠Êúü‰∏ãË°åÂä®ËÉΩËæÉÂ§ß„ÄÇ")
                else:
                    st.write("MACD ÊåÅÂπ≥ÔºåÂ∏ÇÂú∫ËßÇÊúõÊÉÖÁª™Êµì„ÄÇ")
            elif indicator == "RSI":
                if latest["RSI"] < 30:
                    st.write("RSI < 30ÔºåË∂ÖÂçñÂå∫ÂüüÔºåÂèØËÉΩÂèçÂºπ„ÄÇ")
                elif latest["RSI"] > 70:
                    st.write("RSI > 70ÔºåË∂Ö‰π∞È£éÈô©ÔºåÂèØËÉΩÂõûË∞É„ÄÇ")
                else:
                    st.write("RSI ‰∏≠ÊÄßÔºåÂ∏ÇÂú∫ÈúáËç°„ÄÇ")

    with tab5:
        st.subheader("üìä ÊùøÂùóÊ¶ÇÂøµËÅîÂä®ÂàÜÊûê")
        if code_type == "AËÇ°":
            try:
                all_concepts = ak.stock_board_concept_name_ths()
                st.write("üîç Ê¶ÇÂøµÊùøÂùóÊé•Âè£ËøîÂõûÂ≠óÊÆµ:", all_concepts.columns.tolist())
                st.dataframe(all_concepts.head())
            except Exception as e:
                st.write("Ëé∑ÂèñÊ¶ÇÂøµÊùøÂùóÂ§±Ë¥•:", str(e))
            try:
                flow_df_raw = ak.stock_board_concept_fund_flow_ths()
                st.write("üîç ÊùøÂùóËµÑÈáëÊµÅÊé•Âè£ËøîÂõûÂ≠óÊÆµ:", flow_df_raw.columns.tolist())
                st.dataframe(flow_df_raw.head())
            except Exception as e:
                st.write("Ëé∑ÂèñËµÑÈáëÊµÅÂ§±Ë¥•:", str(e))
            concepts = fetch_stock_concepts(code, code_type)
            if concepts:
                st.write("ÊâÄÂ±ûÊ¶ÇÂøµÊùøÂùó:", "„ÄÅ".join(concepts))
                flow_df = fetch_concept_fund_flow()
                if not flow_df.empty and "error" not in flow_df.columns:
                    flow_df = flow_df[flow_df["ÊùøÂùóÂêçÁß∞"].isin(concepts)]
                    if not flow_df.empty:
                        flow_df["‰∏ªÂäõÂáÄÊµÅÂÖ•Êï∞ÂÄº"] = pd.to_numeric(flow_df["‰∏ªÂäõÂáÄÊµÅÂÖ•"], errors="coerce")
                        flow_df["Ê∂®Ë∑åÂπÖÊï∞ÂÄº"] = pd.to_numeric(flow_df["Ê∂®Ë∑åÂπÖ"], errors="coerce")
                        flow_df = flow_df.sort_values("‰∏ªÂäõÂáÄÊµÅÂÖ•Êï∞ÂÄº", ascending=False)
                        st.dataframe(flow_df[["ÊùøÂùóÂêçÁß∞", "Ê∂®Ë∑åÂπÖ", "‰∏ªÂäõÂáÄÊµÅÂÖ•"]])
                        heatmap_df = pd.melt(
                            flow_df,
                            id_vars=["ÊùøÂùóÂêçÁß∞"],
                            value_vars=["‰∏ªÂäõÂáÄÊµÅÂÖ•Êï∞ÂÄº", "Ê∂®Ë∑åÂπÖÊï∞ÂÄº"],
                            var_name="ÊåáÊ†á",
                            value_name="Êï∞ÂÄº"
                        )
                        fig = px.imshow(
                            heatmap_df.pivot(index="ÊåáÊ†á", columns="ÊùøÂùóÂêçÁß∞", values="Êï∞ÂÄº").values,
                            labels=dict(x="ÊùøÂùóÂêçÁß∞", y="ÊåáÊ†á", color="Êï∞ÂÄº"),
                            x=flow_df["ÊùøÂùóÂêçÁß∞"].tolist(),
                            y=["‰∏ªÂäõÂáÄÊµÅÂÖ•", "Ê∂®Ë∑åÂπÖ"],
                            color_continuous_scale="RdYlGn"
                        )
                        fig.update_layout(height=500, margin=dict(l=40, r=40, t=40, b=40))
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.write("ÊöÇÊó†ÊùøÂùóËµÑÈáëÊµÅÊï∞ÊçÆ")
                else:
                    st.write("ÊùøÂùóËµÑÈáëÊµÅËé∑ÂèñÂ§±Ë¥•")
            else:
                st.write("Êú™ÊâæÂà∞Áõ∏ÂÖ≥Ê¶ÇÂøµÊùøÂùó")
        else:
            st.write("ETF‰∏ªÈ¢ò/ÊåáÊï∞ÊùøÂùóÔºö", fetch_stock_concepts(code, code_type))
            st.write("ETFÂ§ö‰∏∫‰∏ªÈ¢òÊåáÊï∞ÔºåÊó†AËÇ°Ê¶ÇÂøµÊùøÂùóËµÑÈáëÊµÅËÅîÂä®„ÄÇ")

